{"version":3,"sources":["Components/Counter/Counter.module.scss","utils/button/Button.tsx","store/reducers/count-reducer.ts","Components/Counter/Counter.tsx","validators/validators.js","Components/Settings/Settings.tsx","App.tsx","reportWebVitals.js","store/reducers/store.ts","index.js","Components/Settings/form.module.css","utils/button/Button.module.scss","Components/Settings/Settings.module.scss"],"names":["module","exports","Button","React","memo","props","className","style","buttonWrapper","disabled","disabledStatus","onClick","name","initialStste","startValue","disableInc","disableReset","disableSet","value","maxValue","error","incValue","data","type","setValuesAC","maxVal","startVal","disButton","whatdisable","setError","Counter","dispatch","useDispatch","useSelector","state","countreducer","disableRest","counterwrapper","mainwindow","count","counterr","controls","requiriedField","undefined","minValue","SettingsForm","styleForm","contentform","onSubmit","handleSubmit","Field","placeholder","component","Input","validate","geterr","buttonWrap","form","meta","touched","input","initial","erdiv","Settings","useEffect","locvalue","localStorage","getItem","locmaxVal","locstartVal","SettingsReduxForm","reduxForm","useCallback","formData","MaxValue","setItem","JSON","stringify","setValues","Counterstyle","settigStyle","settingFormWrapper","err","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","dis","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5992445d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterwrapper\":\"Counter_counterwrapper__3pCnk\",\"mainwindow\":\"Counter_mainwindow__1v5pM\",\"error\":\"Counter_error__20-oV\",\"count\":\"Counter_count__3rMXh\",\"counterr\":\"Counter_counterr__1-m77\",\"controls\":\"Counter_controls__2wUaS\"};","import React, { Component } from 'react'\r\n\r\nimport style from \"../button/Button.module.scss\"\r\nimport {WrappedFieldProps} from \"redux-form\";\r\ninterface propsType  {\r\n    name: string\r\n    disabledStatus: boolean\r\n    onClick?: ()=>void\r\n}\r\n\r\n\r\n\r\nexport const Button = React.memo(function (props: propsType) {\r\n    return <div className={style.buttonWrapper}>\r\n        <button  disabled={props.disabledStatus} onClick={props.onClick}>{props.name}</button>\r\n    </div>\r\n\r\n})\r\n\r\n\r\n\r\n//\r\n// export class MyCustomButton extends Component {\r\n//     render() {\r\n//         const {  name,\r\n//             disabledStatus} = this.props\r\n//         return (\r\n//             <div>\r\n//\r\n//\r\n//                 <button disabled={props.disabledStatus} >{props.name}</button>\r\n//\r\n//\r\n//\r\n//             </div>\r\n//         )\r\n//     }\r\n// }","import { Dispatch } from \"redux\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport { AppRootStateType } from \"./store\";\r\n\r\ntype CounterStateType = {\r\n    startValue: number\r\n    disableInc: boolean\r\n    disableReset: boolean\r\n    disableSet: boolean\r\n    value: number\r\n    maxValue: number\r\n    error: string|null\r\n}\r\nconst initialStste: CounterStateType = {\r\n    startValue: 0,\r\n    disableInc: false,\r\n    disableReset: false,\r\n    disableSet: false,\r\n    value: 0,\r\n    maxValue: 0,\r\n    error: \"\"\r\n}\r\n\r\nexport const incValue = (data: number) => ({type: 'inc-Value', data} as const)\r\nexport const setValuesAC = (maxVal: number, startVal: number, value: number) => ({\r\n    type: 'set-Values',\r\n    maxVal,\r\n    startVal,\r\n    value\r\n} as const)\r\nexport const disButton = (whatdisable: any) => ({type: 'disable-button', whatdisable} as const)\r\nexport const resValues = () => ({type: 'res-value'} as const)\r\nexport const setError = (error: string|null) => ({type: 'set-error', error} as const)\r\n// const dispatch=useDispatch()\r\n\r\n// // export function stopSubmit(form: string, errors?: Object): Action;\r\n// export const SendLoginData = (data: LoginDataType) => {\r\n//     return async (dispatch: ThunkDispatch<inittype, void, ActionsTypes | FormAction>) => {\r\n//         // let action=stopSubmit(\"login\",{_error:'incorrect email or password  '})\r\n//         // dispatch(action)\r\n\r\n\r\ntype ActionType = ReturnType<typeof incValue> |\r\n    ReturnType<typeof setValuesAC> |\r\n    ReturnType<typeof disButton> |\r\n    ReturnType<typeof resValues> |\r\n    ReturnType<typeof setError>\r\n\r\n\r\nexport const countreducer = (state: CounterStateType = initialStste, action: ActionType): CounterStateType => {\r\n    switch (action.type) {\r\n        case 'inc-Value':\r\n            return {...state, value: state.value + action.data}\r\n        case 'set-Values': {\r\n            return {...state, maxValue: action.maxVal, startValue: action.startVal, value: action.value}\r\n        }\r\n        case 'disable-button': {\r\n            const dis = action.whatdisable\r\n            return {...state, ...dis}\r\n        }\r\n        case 'res-value' :\r\n            return {...state, value: 0}\r\n        case 'set-error': {\r\n            return {...state, error: action.error}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport const setValues = (maxVal: number, startVal: number, value: number) => (dispatch:Dispatch)=>{\r\n    localStorage.setItem(\"value\",JSON.stringify(value))\r\n    localStorage.setItem(\"maxVal\",JSON.stringify(maxVal))\r\n    localStorage.setItem(\"startVal\",JSON.stringify(startVal))\r\n    dispatch(setValuesAC(maxVal, startVal, value))\r\n}\r\nexport const getValueFromLocal = () => (dispatch:Dispatch)=>{\r\n    let locvalue=localStorage.getItem(\"value\")\r\n    let locmaxVal=localStorage.getItem(\"maxVal\")\r\n    let locstartVal=localStorage.getItem(\"startVal\")\r\n    if(locvalue&&locmaxVal&&locstartVal){\r\n        dispatch(setValuesAC(+locmaxVal, +locstartVal, +locvalue))\r\n\r\n    }\r\n}","import React, {useEffect} from 'react'\nimport style from \"./Counter.module.scss\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from '../../store/reducers/store';\nimport {Button} from \"../../utils/button/Button\";\nimport {disButton, incValue, resValues, setError, setValues} from \"../../store/reducers/count-reducer\";\n\ntype propsType = {\n    demo?: boolean\n\n}\n\nexport const Counter = React.memo(function (props: propsType) {\n    const dispatch = useDispatch()\n    const value = useSelector<AppRootStateType, number>(state => state.countreducer.value)\n    const maxValue = useSelector<AppRootStateType, number>(state => state.countreducer.maxValue)\n    const disableInc=useSelector<AppRootStateType,boolean>(state => state.countreducer.disableInc)\n    const disableRest=useSelector<AppRootStateType,boolean>(state => state.countreducer.disableReset)\n    const eror=useSelector<AppRootStateType,string|null>(state => state.countreducer.error)\n    const incHandler = () => {\n        if (value < maxValue - 1) {\n            dispatch(incValue(1))\n        }\n        else {\n            dispatch(incValue(1))\n            dispatch(disButton({disableInc: true,\n                disableReset: false,\n                disableSet: false,}))\n\n        }\n\n    }\n    const resetHandler = () => {\n        dispatch(resValues())\n        dispatch(disButton({disableInc: false,\n            disableReset: false,\n            disableSet: false,}))\n        dispatch(setError(\"\"))\n\n    }\n\n\n\nconst error=useSelector<AppRootStateType,string|null>(state => state.countreducer.error)\n    return <div className={style.counterwrapper}>\n        <div>\n            Counter with TypeScript, React,redux, redux-form, scss, localStorage\n        </div>\n        <div className={style.mainwindow}>\n            {!error? <div className={value<maxValue?style.count:style.counterr}>\n                <p>{value}</p>\n            </div>:<div className={style.error}>{error}</div>}\n\n\n\n            <div className={style.controls}>\n                <Button onClick={incHandler} name={\"inc\"} disabledStatus={disableInc}/>\n                <Button onClick={resetHandler} name={\"reset\"} disabledStatus={disableRest}/>\n\n\n            </div>\n\n\n        </div>\n\n\n    </div>\n\n})\n\n\n\n","import React from \"react\";\r\n\r\nexport const requiriedField = (value)=> {\r\n\r\n    return value ? undefined : 'Required field'\r\n}\r\n\r\n\r\nexport const minValue = (value) =>{\r\n\r\n    return  value && value < 0 ? `Must be >0 characters or more` : undefined\r\n}\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport Counterstyle from \"../Counter/Counter.module.scss\"\r\nimport {Button} from \"../../utils/button/Button\";\r\nimport {InjectedFormProps} from 'redux-form/lib/reduxForm';\r\nimport {Field, WrappedFieldProps, reduxForm} from \"redux-form\";\r\nimport { useDispatch, useSelector} from \"react-redux\";\r\nimport {disButton, getValueFromLocal, setError, setValues, setValuesAC} from \"../../store/reducers/count-reducer\";\r\nimport {AppRootStateType} from \"../../store/reducers/store\";\r\nimport styleForm from \"../Settings/form.module.css\"\r\nimport settigStyle from \"../Settings/Settings.module.scss\"\r\nimport {minValue, requiriedField} from \"../../validators/validators\";\r\n\r\ninterface RenderFieldProps extends WrappedFieldProps {\r\n    type: string\r\n}\r\n\r\nexport type propsType = {\r\n    geterr:(err:string|null)=>void\r\n    initialValus?:FormDataType\r\n\r\n}\r\nexport type FormDataType = {\r\n    MaxValue: number\r\n    startValue: number\r\n\r\n}\r\n\r\n\r\nexport const SettingsForm: React.FC<InjectedFormProps<FormDataType,propsType>&propsType> =\r\n    ({/*initialValues=initialValus,*/...props}) => {\r\n\r\n    const disableSet = useSelector<AppRootStateType, boolean>(state => state.countreducer.disableSet)\r\n    const startValue = useSelector<AppRootStateType, number>(state => state.countreducer.startValue)\r\n    const maxValue = useSelector<AppRootStateType, number>(state => state.countreducer.maxValue)\r\n    return (\r\n\r\n        <form className={styleForm.contentform} onSubmit={props.handleSubmit}>\r\n\r\n            <div>\r\n                <label>MaxValue:</label>\r\n                <Field placeholder={`${maxValue}`} name={'MaxValue'} type=\"number\" component={Input}\r\n                       validate={[minValue, requiriedField]} geterr={props.geterr}\r\n                />\r\n            </div>\r\n            <div>\r\n                <label>StartValue:</label>\r\n                <Field  placeholder={`${startValue}`} type=\"number\" name={'startValue'}\r\n                       validate={[minValue, requiriedField]}\r\n                       component={Input} geterr={props.geterr}\r\n                />\r\n            </div>\r\n            <div className={styleForm.buttonWrap}>\r\n                <Button disabledStatus={disableSet} name={'Set'} {...props}/>\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const Input = (props: RenderFieldProps&propsType) => {\r\n\r\n\r\n    return (\r\n        <div className={styleForm.form}>\r\n            <div className={props.meta.error && props.meta.touched ? styleForm.counterr : \"\"}>\r\n\r\n                <input  {...props.input} value={props.meta.initial} {...props}/>\r\n            </div>\r\n            <div>\r\n                {props.meta.error && props.meta.touched? <span>{props.meta.error}</span>:<div className={styleForm.erdiv}>  </div>}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const Settings = React.memo(function (props) {\r\n    const dispatch = useDispatch()\r\n\r\n    const startValue = useSelector<AppRootStateType, number>(state => state.countreducer.startValue)\r\n    const disableInc = useSelector<AppRootStateType, boolean>(state => state.countreducer.disableInc)\r\n    const disableReset = useSelector<AppRootStateType, boolean>(state => state.countreducer.disableReset)\r\n    const disableSet = useSelector<AppRootStateType, boolean>(state => state.countreducer.disableSet)\r\n    const value = useSelector<AppRootStateType, number>(state => state.countreducer.value)\r\n    const maxValue = useSelector<AppRootStateType, number>(state => state.countreducer.maxValue)\r\n    useEffect(() => {\r\n        dispatch(setError(\"Put values in fields\"))\r\n\r\n       dispatch( getValueFromLocal())\r\n    },[])\r\n\r\n\r\n    const initialValues=\r\n        {   MaxValue: maxValue,\r\n            startValue: startValue\r\n        }\r\n\r\n    const SettingsReduxForm=reduxForm<FormDataType,propsType>\r\n    ({form: 'settings'})(SettingsForm)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const onSubmit = useCallback((formData: FormDataType) => {\r\n            if (+formData.MaxValue || +formData.startValue < 0) {\r\n                dispatch(setError(\"Incorrect - Values\"))\r\n\r\n            }\r\n\r\n\r\n            if (+formData.MaxValue > +formData.startValue) {\r\n                dispatch(setValues(+formData.MaxValue, +formData.startValue, +formData.startValue))\r\n                let dis = {\r\n                    disableInc: false,\r\n                    disableReset: false,\r\n                    disableSet: true\r\n                }\r\n                dispatch(setError(\"\"))\r\n                dispatch(disButton(dis))\r\n\r\n\r\n            } else {\r\n                let dis = {\r\n                    disableInc: true,\r\n                    disableReset: true,\r\n                    disableSet: false\r\n                }\r\n                dispatch(setError(\"Max value must be bigger start value\"))\r\n                dispatch(disButton(dis))\r\n\r\n            }\r\n\r\n\r\n        }, [dispatch]\r\n    )\r\n    const geterr=(err:string|null)=>{\r\n        return  dispatch(setError(err))\r\n\r\n    }\r\n    return <div className={Counterstyle.counterwrapper}>\r\n\r\n        <div className={Counterstyle.mainwindow}>\r\n\r\n            <div className={settigStyle.settingFormWrapper}>\r\n                <SettingsReduxForm  geterr={geterr}  onSubmit={onSubmit}/>\r\n            </div>\r\n\r\n\r\n        </div>\r\n\r\n\r\n    </div>\r\n\r\n})\r\n\r\n\r\n","import './App.scss';\nimport {Counter} from \"./Components/Counter/Counter\";\nimport {Settings} from \"./Components/Settings/Settings\";\n\ntype propsType ={\n    demo?: boolean\n\n}\n\nfunction App(props:propsType) {\n\n  return (\n    <div className=\"App\">\n\n\n      <Counter/>\n        <Settings/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {countreducer} from \"./count-reducer\";\r\nimport {applyMiddleware, combineReducers, createStore, Store} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    countreducer: countreducer,\r\n    form: formReducer\r\n\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type StoreType = Store<AppRootStateType>\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from \"./store/reducers/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n\n      <App />\n\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"form_form__3OkHx\",\"error\":\"form_error__tV3HL\",\"formsummaryerror\":\"form_formsummaryerror__3Kf5r\",\"buttonWrap\":\"form_buttonWrap__1FrK6\",\"erdiv\":\"form_erdiv__2UIHO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonWrapper\":\"Button_buttonWrapper__vn1LY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingFormWrapper\":\"Settings_settingFormWrapper__3uqQN\"};"],"sourceRoot":""}